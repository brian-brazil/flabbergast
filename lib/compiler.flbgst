# The parser for Flabbergast is constructed by assembly of small parser
# combinators that are rendered into a parser in the target language. This
# describes the interface expected.
parser_tmpl : Template {
	# Match a literal string, exactly as provided.
	exact : Template { word ?: }
	# Match another parse element, but, if parsing fails, back up the parser and
	# continue to the next rule.
	optional : Template { of ?: }
	# Match a list of parse elements, in order.
	sequence : Template { of ?: }
	# Match a parse element many times, with the provided separator in between
	# each element. That is, parse a list of the form `e,e,e` where `e` is the
	# element and `s` is the separator. The `nonempty` Boolean insists that there
	# is at least one element parsed, otherwise, an empty is list is valid.
	many : Template { of ?:  separator : Null  nonempty : False }
	many_word : Template many {
		separator_word ?:
		separator : exact { word : separator_word }
	}
	# Parses the elements provided in succession, succeeding if any one succeeds
	# and failing if all fail.
	alternate : Template { of ?: }
	# Parses a single character in the range of characters provided.
	range : Template { from ?:  to ?: }
	# Parses a single character, as indicated.
	single : Template {
		# A string of characters where the parser may match any single character in
		# the string.
		char ?:
		# If true, parsing will succeed if the current character is not in the
		# string defined in `char`.
		invert_match : False
	}
	# Matches any character by Unicode class.
	char_class : Template {
		# A list of character classes to match
		classes ?:
		# If true, parsing will succeed if the current character is not in the
		# any of the character classes enabled.
		invert_match : False

		letter_lower %:
		letter_modifier %:
		letter_other %:
		letter_title %:
		letter_upper %:
		mark_combining %:
		mark_enclosing %:
		mark_nonspace %:
		number_decimal %:
		number_letter %:
		number_other %:
		other_control %:
		other_format %:
		other_private %:
		other_surrogate %:
		other_unassigned %:
		punctuation_connector %:
		punctuation_dash %:
		punctuation_end %:
		punctuation_final_quote %:
		punctuation_initial_quote %:
		punctuation_other %:
		punctuation_start %:
		separator_line %:
		separator_paragraph %:
		separator_space %:
		symbol_currency %:
		symbol_math %:
		symbol_modifier %:
		symbol_other %:
	}
	# Checks that the next character is not one of the specified characters, but does not consume it.
	except : Template {
		# A string with characters to match
		char ?:
	}
	# Parses sub rules and uses their values to compute an integer.
	accumulate_integer : Template {
		# Each successful rule where `accumulate` is true will have the current
		# input character applied to the accumulator.
		accumulate : False
		# The initial value of the accumulator.
		initial : 0
		# The multiplier is the base of the number used. At each character, the
		# existing value will be multiplied by the supplied multiplier before the
		# new value is added.
		multiplier %:
		# The character will have the provided offset subtracted from the current
		# character before adding it to the accumulator.
		offset %:
		# After successful parsing, the value is stored in the desired field.
		field ?:
		in ?:
	}
	# This works much like `accumulate_integer` except the integer is a Unicode
	# codepoint added to the currently accumulated string.
	accumulate_unichar_integer : Template {
		# Each successful rule where `accumulate` is true will have the current
		# input character applied to the accumulator.
		accumulate : False
		# The initial value of the accumulator.
		initial : 0
		# The multiplier is the base of the number used. At each character, the
		# existing value will be multiplied by the supplied multiplier before the
		# new value is added.
		multiplier %:
		# The character will have the provided offset subtracted from the current
		# character before adding it to the accumulator.
		offset %:
		in ?:
	}
	accumulate_float : Template { accumulate : False  field ?:  in ?: }
	accumulate_list : Template {
		accumulate : False
		field ?:
		type ?:
		in ?:
		# Remove duplicates using the field name provided. It must be common to
		# all the children.
		deduplicate : Null
		# Field values which are not permitted at all.
		forbid : []
	}
	accumulate_string : Template { accumulate : False  field ?:  in ?: }
	# Adds a Unicode literal, by codepoint, to the currently accumulating string
	# after successfully parsing the child parse expression.
	collect_codepoint : Template { codepoint ?:  in ?: }
	# Parses another rule
	other : Template {
		# This it the name (and therefore type) of the desired rule to parse.
		type ?:
		# Some rules have many possible AST nodes that they can generate. In some
		# instances, it is desirable to parse only subsets of those possible AST
		# nodes. Rules may then define groups of AST nodes as “alternate” versions
		# of the rule, which will produce the same type, but a different possible
		# subset of values. If specified, this selects one of the predefined
		# subsets. The name of any given AST node is also valid.
		alternate : Null
		# The field in which to place the result. If `Null`, it will be added to
		# the current list.
		field ?:
	}

}
# Environments are domains in which lookups always yield the same value. They
# are used to break generated code into chunks where lookups occur only in the
# boundaries between chunks. Each syntax element inherits an environment from
# the containing element and then applies it to its children, if any.
#
# Different parts of the code have different semantics, so there are different
# flavours of environment application.
environment_tmpl : Template {
	# A template for all the actions (i.e., things which can be done with an
	# environment).
	application_action : Template {
		# The flavour for which this action should be applied. If the flavour is
		# not matched, this action is ignored.
		flavour : flavour_simple
	}
	# Apply environment to other syntax elements that support environments.
	other_elements : Template application_action {
		# A list of fields to absorb the current environment
		fields ?:
		# The flavour that should be applied. Normally the current flavour.
		target_flavour : flavour
	}
	# Apply environment to all the other syntax elements in a list.
	list_of : Template application_action {
		# The field containing the list.
		field ?:
		# The flavour that should be applied. Normally the current flavour.
		target_flavour : flavour
	}
	# Apply an *independent* environment for each of the other syntax elements in
	# a list.
	list_independent : Template application_action {
		# The field containing the list of elements.
		field ?:
		# Whether to start with a blank environment or derive from the current environment.
		inherit : False
		# The flavour that should be applied. Normally the current flavour.
		target_flavour : flavour
	}
	# Create an empty environment that does not inherit from the current environment.
	blank_environment : Template application_action {
		# A list of actions to perform using this new environment.
		apply_to ?:
	}
	modified_environment : Template application_action {
		# A list of actions to perform using this new environment.
		apply_to ?:
		# If true, unmasked lookups are done in the parent environment. This is
		# used for Let-like behaviour. Normally, lookups in a child environment are
		# independent, so anything “learnt” in the child environment does not apply
		# to the parent. In certain cases, including Let, things learnt about
		# masked names is not applicable, but things learnt about other names is
		# applicable to the parent, so this copies that information back into the
		# parent.
		force_back : False
		# A list of special names. These are names that have different bindings
		# in the child environment than the parent.
		special_names : []

		# Create masks for all the attributes in a list. Masks are names backed
		# by real expressions, so information about them can translate to the
		# rest of the syntax tree.
		masks_from_attributes : Template {
			# The field containing the list of attributes.
			field ?:
		}
		# Create mask from a name and expression. Masks are names backed by real
		# expressions, so information about them can translate to the rest of the
		# syntax tree.
		mask_from_fields : Template {
			# The field containing the name to mask.
			name_field ?:
			# The field containing the expression to mask.
			expr_field ?:
		}
		# Create a free name from a name. A free name is one which is present in
		# the new environment, but not backed by a syntax element.
		free_name_from_field : Template {
			# The field containing the name.
			field ?:
		}
		# Create a name from a field where the name must not be used in the new
		# environment. These are used mostly to detect potential circular
		# evaluation.
		forbidden_name_from_field : Template {
			# The field containing the name.
			field ?:
		}
	}
	# Template for the “flavours” of environment.
	flavour_tmpl : Template {
		# Whether this flavour needs to propagate environments.
		enabled ?:
	}
	# An environment flavour that does nothing. It has no environment and does
	# not propagate them.
	flavour_none ?:
	# An environment flavour that causes syntax groups to have an environment and
	# participate in environment propagation and type checking.
	flavour_simple ?:
	# An environment flavour that extends `flavour_simple`, but propagates a
	# second type of environment.
	flavour_double ?:
}
# The definitions for all the types in the Flabbergast language.
known_types_tmpl : Template {
	bool ?:
	float ?:
	frame ?:
	int ?:
	str ?:
	template ?:
	unit ?:
}
known_vm_types_tmpl : Template {
	any ?:
	list ?:
}
# The actions that can be performed to check that the required return type is
# correct.
ensure_type_tmpl : Template {
	any : Template filter {
		types : known_types
	}
	bool : Template filter {
		types : [ known_types.bool ]
	}
	frame : Template filter {
		types : [ known_types.frame ]
	}
	number : Template filter {
		types : [ known_types.float, known_types.int ]
	}
	# Check that the return type is one of the supplied types.
	filter : Template {
		# The set of types to restrict the return type. If the return type is not
		# in this set, a type mismatch error will be reported.
		types ?:
		# The action to carry forward with the restricted type.
		ensure_type_of : stop {}
	}
	# Apply the current return type to the return type of other AST nodes.
	propagate : Template {
		# A list of field names that should be restricted to this type.
		fields ?:
		# Any types listed here are added to the return type before propagation.
		# Effectively, this enlarges the return type set. For insight, look at the
		# coalesce operator.
		extra_types : []
	}
	# Apply the current return type to the return type of a collection of other AST nodes.
	propagate_all : Template {
		# The field containing the list.
		field ?:
		# Any types listed here are added to the return type before propagation.
		# See `propagate.extra_types`.
		extra_types : []
	}
	# Restrict the type based on an AST node containing a type literal (e.g., `As` operator).
	dynamic : Template {
		# The field containing the type AST node.
		field ?:
		# Rather than restrict to the type specified, restrict to any type which
		# may be casted to that type.
		propagate_castable : False
		# The action to perform with the restricted type.
		ensure_type_of : stop {}
	}
	# Store the type in a type variable.
	stored : Template {
		# The field containing a list of identifiers with the lookup pieces.
		field ?:
	}
	# Stored associated with the node.
	intrinsic : Template {}
	# Perform no further action.
	stop : Template {}
	# Perform multiple independent actions.
	multiple : Template {
		# A list of actions to perform.
		actions ?:
	}
}
# Templates for making common fields in syntax elements. This is so that some parse rules accumulate results in a single field, such as comments.
common_fields_tmpl : Template {
	str : Template { field_name %: }
	int : Template { field_name %: }
	float : Template { field_name %: }
	other : Template { field_name %:  type ?: }
}
# Code generation for all the elements in the KWS VM. See that documentation for details.
kws_tmpl : Template {
	# The base template for most of the simple instructions.
	base_tmpl : Template codegen.gen_tmpl {
		arguments ?:
		return_type ?:
	}
	bool_negate : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.bool } ]
		return_type : known_types.bool
	}
	error : Template base_tmpl {
		message ?:
		arguments : [{ value : message  type : known_types.str }]
		return_type : Null
	}
	int_add : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.int },
			{ value : right  type : known_types.int }
		]
		return_type : known_types.int
	}
	int_divide : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.int },
			{ value : right  type : known_types.int }
		]
		return_type : known_types.int
	}
	int_modulus : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.int },
			{ value : right  type : known_types.int }
		]
		return_type : known_types.int
	}
	int_multiply : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.int },
			{ value : right  type : known_types.int }
		]
		return_type : known_types.int
	}
	int_negate : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.int } ]
		return_type : known_types.int
	}
	int_subtract : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.int },
			{ value : right  type : known_types.int }
		]
		return_type : known_types.int
	}
	# Convert an integer to a Boolean by comparing it to a single value.
	int_to_bool : Template base_tmpl {
		# The expression to compute
		source ?:
		# A static integral value to compare against.
		number ?:
		# Whether to invert the result (i.e., not equal rather than equal)
		invert : False
		arguments : [{ value : source  type : known_types.int }]
		return_type : known_types.bool
	}
	int_to_float : Template base_tmpl {
		expr ?:
		arguments : [{ value : expr  type : known_types.int }]
		return_type : known_types.float
	}
	float_add : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.float },
			{ value : right  type : known_types.float }
		]
		return_type : known_types.float
	}
	float_divide : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.float },
			{ value : right  type : known_types.float }
		]
		return_type : known_types.float
	}
	float_is_finite : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.float } ]
		return_type : known_types.bool
	}
	float_is_nan : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.float } ]
		return_type : known_types.bool
	}
	float_modulus : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.float },
			{ value : right  type : known_types.float }
		]
		return_type : known_types.float
	}
	float_multiply : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.float },
			{ value : right  type : known_types.float }
		]
		return_type : known_types.float
	}
	float_negate : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.float } ]
		return_type : known_types.float
	}
	float_subtract : Template base_tmpl {
		left ?:
		right ?:
		arguments : [
			{ value : left  type : known_types.float },
			{ value : right  type : known_types.float }
		]
		return_type : known_types.float
	}
	float_to_int : Template base_tmpl {
		expr ?:
		arguments : [{ value : expr  type : known_types.float }]
		return_type : known_types.int
	}
	string_concatenate : Template base_tmpl {
		first ?:
		second ?:
		arguments : [
			{ value : first  type : known_types.str },
			{ value : second  type : known_types.str }
		]
		return_type : known_types.str
	}
	string_ordinal : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.int } ]
		return_type : known_types.str
	}
	frame_new_through : Template base_tmpl {
		container ?:
		context ?:
		start ?:
		end ?:
		arguments : [
			{ value : start  type : known_types.int },
			{ value : end  type : known_types.int },
			{ value : context  type : known_vm_types.list },
			{ value : container  type : known_types.frame }
		]
		return_type : known_types.frame
	}
	frame_id : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.frame } ]
		return_type : known_types.str
	}
	frame_context : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.frame } ]
		return_type : known_vm_types.list
	}
	list_null : Template codegen.gen_tmpl {}
	list_prepend : Template base_tmpl {
		frame ?:
		tail ?:
		arguments : [
			{ value : frame  type : known_types.frame },
			{ value : tail  type : known_vm_types.list }
		]
		return_type : known_vm_types.list
	}
	list_append : Template base_tmpl {
		head ?:
		tail ?:
		arguments : [
			{ value : head  type : known_vm_types.list },
			{ value : tail  type : known_vm_types.list }
		]
		return_type : known_vm_types.list
	}
	lookup_tmpl : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.frame } ]
		return_type : known_vm_types.any
	}
	lookup_literal : Template lookup_tmpl {
		name ?:
	}
	lookup_field : Template lookup_tmpl {
		field ?:
	}

	cast_to_string : Template codegen.gen_tmpl {
		source ?:
	}
	string_constant_tmpl : Template codegen.gen_tmpl {}
	string_constant : Template string_constant_tmpl {
		str ?:
	}
	string_constant_from_field : Template string_constant_tmpl {
		field ?:
	}
	string_length : Template base_tmpl {
		source ?:
		arguments : [ { value : source  type : known_types.str } ]
		return_type : known_types.int
	}
	# An integral, floating point, or Boolean constant.
	numeric_constant : Template codegen.gen_tmpl {
		# The type of the value
		type ?:
		# Either the numeric value, `max`, or `min`.
		number ?:
		# The maximum value this type can take.
		max ?:
		# The minimum value this type can take.
		min ?:
	}
	numeric_constant_units : Template numeric_constant {
		# The unit multiplier
		unit %:
		# The field containing the value
		field ?:
	}
	# The null value of the unit type.
	null_constant : Template codegen.gen_tmpl {}
	# The not-a-number floating point constant.
	nan_constant : Template codegen.gen_tmpl {}
	# The positive infinity floating point constant
	infinity_constant : Template codegen.gen_tmpl {}

	# Compare two values of the same type and return an indicator integer.
	compare : Template codegen.gen_tmpl {
		left ?:
		right ?:
	}
	# Branch the current program flow.
	conditional : Template codegen.gen_tmpl {
		# A Boolean value to choose the correct path.
		condition ?:
		# The return value if the condition is true.
		true_action ?:
		# The return value if the condition is false.
		false_action ?:
	}
	# Perform dynamic dispatch of a value. This is slightly different from the VM
	# specification; it must be combined with `codegen.type_dispatch` for the
	# full effect.
	dynamic_type_dispatch : Template codegen.gen_tmpl {
		# The code generator which produces an unknown type.
		of ?:
		# The list of types which this value may take. If the object has a
		# different type, a run-time error is produced.
		allow_types ?:
	}
	# Create a tuple merge loop using the provided values as inputs.
	iterator : Template codegen.gen_tmpl {
		# The code generation to produce frames and templates over which to be
		# iterated.
		# TODO: This must be refactored to handle inputs from fields.
		inputs ?:
		# The initial value for the accumulator of the iterator.
		initial ?:
		# The code to be invoked when the iterator has a value not covered in
		# `cases`.
		default_case ?:
		# A list of the special cases of the iterator. The special cases will
		# always be invoked, even if they are not present in the input.
		cases ?:

		# The current attribute name of the iterator. This may only be used in
		# `default_case` and `cases`.
		current_name ?:
		# The current position of the iterator. This may only be used in
		# `default_case` and `cases`.
		current_ordinal ?:

		# The base template for a “special case”. Not to be used directly.
		base_case_tmpl : Template {
			# The value to return if this case is selected.
			action ?:
		}
		# The attribute name of the special case is a literal.
		literal_case_tmpl : Template base_case_tmpl {
			# The attribute name.
			name ?:
		}
		# The attribute name of the special case is defined in a field of another element.
		remote_field_case_tmpl : Template base_case_tmpl {
			# The field containing the element of interest.
			field ?:
			# The field in the element of interest containing the name.
			name_field ?:
		}
		# The attributes are many based on a list of other syntax elements.
		list_case_tmpl : Template base_case_tmpl {
			# The field containing the list of elements of interest.
			field ?:
			# The field in the element of interest containing the name.
			name_field ?:
			# A name, which may be used in a `parameter` to access the element in the
			# list in `action`.
			current_element ?:
		}
	}
}
# Supplemental code generation. These are more for controlling behaviour of the
# code generator rather than generating code itself. None of these items
# directly generate KWS VM code directly; they simply direct the paths of code
# generation elements in the compiler.
codegen_tmpl : Template {
	# Base template for all code generation templates and KWS VM templates.
	gen_tmpl : Template {}
	# Given a list of syntax elements, fold them to return a single value.
	#
	# Start by computing an initial value. For ever item in the list, call the
	# code generator using either the initial or previous value as input. Return
	# the final value.
	fold_others : Template gen_tmpl {
		# A frame of arguments to be passed to the generator. The attribute names
		# are the argument names.
		arguments ?:
		# The field containing the list.
		field ?:
		# The code generator containing the initial value to put in the fold.
		initial ?:

		# A code generator that should be used in `arguments` to specify the
		# current value being folded.
		fold_argument ?:
	}
	# Change the value of parameters with new values in a lexically-scoped way.
	mask_parameters : Template gen_tmpl {
		parameters ?:
		action ?:
	}
	# Generate an error if executed. This is a tool to help prototyping new
	# features.
	not_implemented : Template gen_tmpl {}
	# Compute the value of another syntax element
	other_code : Template gen_tmpl {
		# Arguments to be passed to the syntax element where keys are the names of the arguments.
		arguments ?:
		# The field containing the syntax element
		field ?:
	}
	# A deveritive of `other_code` with all the arguments set for an expression.
	other_expression : Template other_code {
		arguments : {
			context : codegen.parameter { name : $context }
			self_frame : codegen.parameter { name : $self_frame }
			container_frame : codegen.parameter { name : $container_frame }
		}
	}
	# Use a parameter passed to this syntax group or defined in a containing code generator.
	parameter : Template gen_tmpl {
		name ?:
		error_message : "Parameter \(name) is not defined."
	}
	# Do some type-dependent behaviour
	type_dispatch_tmpl : Template gen_tmpl {
		# A list of `choice_tmpl` to try.
		choices ?:
		# The action to be performed if none of the supplied types match.
		default_action : codegen.not_implemented {}

		# A possible path to choose based on the type.
		choice_tmpl : Template {
			# The type to match.
			type ?:
			# The code to be generated.
			action ?:
		}
	}
	# Choose an appropriate path based on the type of a value.
	type_dispatch : Template type_dispatch_tmpl {
		# The name which may be used in a `parameter` which contains the value of
		# the `of` code generator, converted to the appropriate type. If null, the
		# result is discarded.
		define : Null
		# The input to be considered.
		of ?:
	}
	type_dispatch_parsed : Template type_dispatch_tmpl {
		# The field containing the type information.
		field ?:
	}
}
# The syntax of the Flabbergast language
language_tmpl : Template {
	# The templates to generate the parser, as per `parser_tmpl`.
	parser %:
	# The templates to generate the common fields, as per `common_fields_tmpl`.
	common_fields %:
	# A rule that creates a single node in the AST
	syntax_element : Template {
		# The name of AST node. This will be provided by the attribute name. In a
		# parser generated targeting an object-oriented language, this would be the
		# name of the class for each different element in the syntax tree.
		rule_name %:
		# The name of the group of rules. In a parser generated targeting an
		# object-oriented language, this would be the abstract super-class of a
		# collection of rules.
		group_name %:
		# A frame where the names are the names of the “alternative” rules where
		# this syntax element should be included. The values are ignored. In
		# certain cases, for instance, attributes, it is useful to repackage the
		# available syntax elements into different groups that have the same type.
		alternatives : {}
		# The parser generator structure, made from `parser` templates.
		pattern ?:
		# If the syntax group has environment propagation support, this element
		# contains a list of actions to perform, using templates from the
		# `environment` frame, when the environment is being configured.
		apply_environment_to : environment_flavour.enabled &&
			Error "apply_environment_to attribute must be overridden in \(rule_name)."
		ensure_type_is : is_typeable &&
			Error "ensure_type_is attribute must be overridden in \(rule_name)."
		# Some syntax elements have parsed other syntax elements which must have
		# specific types. This is a tuple where the names are the names of the
		# other syntax elements and the values are a list of types.
		type_demand : {}
		# This is similar to `type_demand` where the names identify lists of syntax
		# elements rather than single elements.
		type_demand_all : {}

		# The code generation value to be returned from this syntax element. It has
		# access to the parameters defined by its group.
		code_value : generation_parameters Is Null ||
			Error "code_value attribute must be overridden in \(rule_name)."

		# If true, this represent a syntax element with all the other fun stuff.
		is_real_element : True
	}
	# This is a special rule that does not define real syntax, but instead,
	# introduce deflection into alternate parsing.
	meandering_element : Template {
		# The name of the rule to be parsed instead.
		alternate_name ?:
		# A frame where the names are the of the “alternative” rules where this
		# element should be included.
		alternatives : {}
		is_real_element : False
	}
	# A group of syntax rules that form a logical group of syntax elements. These
	# should correspond to the single-letter production rules in the
	# specification.
	syntax_group : Template {
		# The `syntax_element` templates to instantiate.
		rules : Template {}
		# This moves fields from the individual AST nodes to the superclass. Each
		# entry is the name of the field and its type (e.g., `name : $str`).
		common : Template {}
		# If true, a parser will be generated that parses all the rules provided in
		# alphabetical order. Otherwise, only individual rules and alternatives
		# will be available for parsing.
		include_base_parser : True
		# The type of syntax checking and name resolution environment associated
		# with this group.
		environment_flavour : environment.flavour_none
		# If true, this syntax group has a type and can be the target of type
		# assurances.
		is_typeable : False
		# These are rules that have already been expanded, rather than `rules`
		# where they are templates.
		static_rules : []
		# A list of parameter names for doing code generation. If code is not be
		# generated, null.
		generation_parameters : Null
		alternatives :
			For rule : expanded_rules
			Reduce
				(For alternative_name : Name, acc_value : acc, rule_value : rule.alternatives
				Select alternative_name : Null)
			With acc : {}
		expanded_rules :
			For rule_tmpl : rules {}, static_rule : static_rules, rule_name : Name
			Select rule_name : static_rule ?? (rule_tmpl {})
		expanded_common : For common_tmpl : common {}, field_name : Name
			Select field_name : common_tmpl {}
	}

	# Parse a space and/or comment
	space : Template parser.accumulate_string {
		# Whether there must be some space for successful parsing.
		mandatory : False
		# If `mandatory` is not true, emit a space when pretty printing.
		preferred : False

		field : $comment
		in : parser.many {
			nonempty : mandatory
			of : parser.alternate {
				of : [
					parser.single { char : " \\t\\n\\r\\f\\v" },
					parser.sequence {
						of : [
							parser.exact { word : "#" },
							parser.many {
								of : parser.single { char : "\\n"  invert_match : True  accumulate : True }
							},
							parser.single { char : "\\n" }
						]
					}
				]
			}
		}
	}
	valid_identifier : Template parser.accumulate_string {
		accumulate : True
		in : parser.sequence {
			of : [
				parser.range { from : "a"  to : "z" },
				parser.many {
					of : parser.alternate {
						of : [
							parser.range { from : "a"  to : "z" },
							parser.range { from : "A"  to : "Z" },
							parser.range { from : "0"  to : "9" },
							parser.single { char : "_" }
						]
					}
				}
			]
		}
	}

	expanded_groups :
		For rule_group_tmpl : rule_groups {}, group_name : Name
		Select group_name : rule_group_tmpl {}

	# Syntax element for expressions
	expression_tmpl : Template syntax_element {
		# The depth/precedence in the expression nesting system, as inferred from
		# the specification.
		level ?:
		alternatives : For x : [ level ] Select "expression\(x)" : Null
		# TODO: Remove this once all the expressions have code generators
		code_value : codegen.not_implemented {}
		# A parser for a top-level expression
		top_expression : Template parser.other {
			accumulate : True
			alternate : $expression0
			type : $expression
		}
		# A parser for an expression one level more nested.
		child_expression : Template parser.other {
			accumulate : True
			alternate : "expression" & (level + 1)
			type : $expression
		}
		# A parser for an expression of the same level.
		sibling_expression : Template parser.other {
			accumulate : True
			alternate : "expression" & level
			type : $expression
		}
	}
	# An expression with two operands separated by a token
	binary_operator : Template expression_tmpl {
		# A string which is the separating token
		operator ?:
		# A template for the right-hand operand, normally a child expression.
		right_operand : Template child_expression { }
		apply_environment_to : [ environment.other_elements { fields : [ $left, $right ] } ]
		pattern : parser.sequence {
			of : [
				child_expression { field : $left },
				space { preferred : True },
				parser.exact { word : operator },
				space { preferred : True },
				right_operand { field : $right }
				]
		}
	}
	# A binary operator that compare results
	compare_operator : Template binary_operator {
		ensure_type_is : ensure_type.filter { types : [ known_types.bool ] }
		type_demand : {
			left : [ known_types.bool, known_types.float, known_types.int, known_types.str  ]
			right : left
		}
		code_value : kws.int_to_bool {
			number -:
			invert -:
			source : kws.compare {
				left : codegen.other_expression { field : $left }
				right : codegen.other_expression { field : $right }
			}
		}
	}
	# A binary operator where the right operand is a type.
	type_operator : Template binary_operator {
		apply_environment_to : [ environment.other_elements { fields : [ $left ] } ]
		right_operand : Template parser.other {
			type : $type
		}
	}
	# An "Is" operator.
	is_suffix_operator : Template binary_operator {
		suffix ?:
		operator : "Is"
		apply_environment_to : [ environment.other_elements { fields : [ $left ] } ]
		right_operand : Template parser.exact { word : suffix }
	}
	# A unary expression preceded by a token
	unary_tmpl : Template expression_tmpl  {
		# A string which precedes the expression
		operator ?:
		apply_environment_to : [ environment.other_elements { fields : [ $expr ] } ]
		pattern : parser.sequence {
			of : [
				parser.exact { word : operator },
				space { },
				child_expression { field : $expr }
			]
		}
	}
	# A expression which is a single word
	literal_tmpl : Template expression_tmpl {
		level : max_level
		apply_environment_to : []
		name ?:
		pattern : parser.exact { word : name }
	}
	int_with_unit_expr_tmpl : Template expression_tmpl {
		level : max_level
		unit ?:
		symbol ?:
		pattern : int_with_unit_tmpl {}
		apply_environment_to : [ ]
		ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
		code_value : kws.numeric_constant_units {
			type : known_types.int
			field : $count
		}
	}
	# A “long” expression (i.e., one containing many terms)
	long_expression_tmpl : Template expression_tmpl {
		# The type of the terms to collect
		term_type ?:
		pattern : parser.sequence {
			of : [
				child_expression { field : $start_expr },
				parser.accumulate_list {
					field : $terms
					type : term_type
					in : parser.many {
						nonempty : True
						of : parser.other {
							type : term_type
							accumulate : True
							field : Null
						}
					}
				}
			]
		}
		apply_environment_to : [
			environment.other_elements { fields : [ $start_expr ] },
			environment.list_of { field : $terms }
		]
		ensure_type_is : ensure_type.number {
			ensure_type_of : ensure_type.multiple {
				actions: [
					ensure_type.propagate {
						fields : [ $start_expr ]
						extra_types : [ known_types.int ]
					},
					ensure_type.propagate_all {
						field : $terms
						extra_types : [ known_types.int ]
					}
				]
			}
		}
		code_value : codegen.fold_others {
			arguments : {
				context : codegen.parameter { name : $context }
				self_frame : codegen.parameter { name : $self_frame }
				container_frame : codegen.parameter { name : $container_frame }
				left : fold_argument
			}
			field : $terms
			initial : codegen.other_expression { field : $start_expr }
		}
	}
	# A right-hand term in “long” expression
	long_term_tmpl : Template syntax_element {
		# The precedence level of the term's enclosing expression.
		level %:
		# The symbol that separates the term.
		symbol ?:
		# The KWS VM operation to perform when the operands are integers.
		integer_operation ?:
		# The KWS VM operation to perform when the operands are floating point numbers.
		float_operation ?:
		apply_environment_to : [ environment.other_elements { fields : [ $expression ] } ]
		ensure_type_is : ensure_type.propagate { fields : [ $expression ] }
		pattern : parser.sequence {
			of : [
				space { preferred : True },
				parser.exact { word : symbol },
				space { preferred : True },
				parser.other {
					accumulate : True
					type : $expression
					alternate : "expression" & (level + 1)
					field : $expression
				}
			]
		}
		code_value : codegen.type_dispatch {
			of : codegen.parameter { name : $left }
			define : $left_operation

			choices :
				[
					# Left is integer
					choice_tmpl {
						type : known_types.int
						action : codegen.type_dispatch {
							of : codegen.other_expression { field : $expression }
							define : $right_operation

							choices :
								[
									# Left is integer, right is integer
									choice_tmpl {
										type : known_types.int
										action : integer_operation {
											left : codegen.parameter { name : $left_operation }
											right : codegen.parameter { name : $right_operation }
										}
									},
									# Left is integer, right is float
									choice_tmpl {
										type : known_types.float
										action : float_operation {
											left : kws.int_to_float {
												expr : codegen.parameter { name : $left_operation }
											}
											right : codegen.parameter { name : $right_operation }
										}
									}
								]
						}
					},
					# Left is float
					choice_tmpl {
						type : known_types.int
						action : codegen.type_dispatch {
							of : codegen.other_expression { field : $expression }
							define : $right_operation

							choices :
								[
									# Left is float, right is integer
									choice_tmpl {
										type : known_types.int
										action : float_operation {
											left : codegen.parameter { name : $left_operation }
											right : kws.int_to_float {
												expr : codegen.parameter { name : $right_operation }
											}
										}
									},
									# Left is float, right is float
									choice_tmpl {
										type : known_types.float
										action : float_operation {
											left : codegen.parameter { name : $left_operation }
											right : codegen.parameter { name : $right_operation }
										}
									}
								]
						}
					}
				]
		}
	}
	# A decimal number with no preceding zeros.
	valid_number : Template parser.alternate {
		multiplier : 10
		offset : 48
		of : [
			parser.exact { word : "0" },
			parser.sequence {
				of : [
					parser.range { from : "1"  to : "9"  accumulate : True },
					parser.many {
						of : parser.range { from : "0"  to : "9"  accumulate : True }
					}
				]
			}
		]
	}

	# A single hexidecimal digit
	hex_digit : Template parser.alternate {
		multiplier : 16
		of : [
			parser.range {
				offset : 48
				accumulate : True
				from : "0"  to : "9"
			},
			parser.range {
				offset: 87
				accumulate : True
				from : "a"  to : "f"
			},
			parser.range {
				offset : 55
				accumulate : True
				from : "A"  to : "F"
			}
		]
	}
	int_with_unit_tmpl : Template parser.sequence {
		symbol %:
		unit %:
		of : [
			parser.accumulate_integer {
				in : valid_number {}
				field : $count
			},
			parser.exact { word : symbol }
		]
	}
	# The general syntax for fricassée expressions (excluding the selector).
	for_pattern : Template parser.sequence {
		selector ?:
		of : [
			parser.exact { word : "For" },
			space { mandatory : True },
			selector { },
			parser.optional {
				of : parser.sequence {
					of : [
						space { mandatory : True },
						parser.exact { word : "Where" },
						space { mandatory : True },
						parser.other {
							type : $expression
							alternate : $expression0
							field : $where_expr
						}
					]
				}
			},
			space { mandatory : True },
			parser.other {
				field : $result_builder
				type : $fricassee_result
			}
		]
	}
	# The general pattern for normal attribute definitions
	attribute_pattern : Template parser.sequence {
		value_pattern : Template parser.other {
			type : $expression
			alternate : $expression0
			field : $expression
		}
		of : [
			space { preferred : True },
			valid_identifier { field : $name },
			space { preferred : True },
			parser.exact { word : ":" },
			space { preferred : True },
			value_pattern { }
		]
	}

	# All the groups in the language. For details, see the specification.
	rule_groups : Template {
		file : Template syntax_group {
			environment_flavour : environment.flavour_simple
			rules +: {
				file : Template syntax_element {
					pattern : parser.sequence {
						of : [
							parser.accumulate_list {
								field : $attributes
								type : $attribute
								deduplicate : expanded_groups.attribute.expanded_common.name
								in : parser.many {
									of : parser.other {
										type : $attribute
										alternate : $plain_attribute
										field : Null
									}
									nonempty : True
								}
							},
							space { }
						]
					}
					apply_environment_to : [ environment.list_independent { field : $attributes } ]
					type_demand_all : { attributes : known_types }
				}
			}
		}

		attribute : Template syntax_group {
			include_base_parser : False
			environment_flavour : environment.flavour_simple
			is_typeable : True
			common +: {
				comment : common_fields.str
				name : common_fields.str
			}
			rules +: {
				plain_attribute : Template syntax_element {
					alternatives : { new_tmpl_attributes : Null  extend_tmpl_attributes : Null  instantiate_tmpl_attributes : Null }
					pattern : attribute_pattern { }
					apply_environment_to : [
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $expression ] } ]
							special_names : [ forbidden_name_from_field { field : $name } ]
						}
					]
					ensure_type_is : ensure_type.any { ensure_type_of : propagate { fields : [ $expression ] } }
				}
				named_override : Template syntax_element {
					alternatives : { extend_tmpl_attributes : Null  instantiate_tmpl_attributes : Null }
					pattern : parser.sequence {
						of : [
							space { preferred : True },
							valid_identifier { field : $name },
							space { preferred : True },
							parser.exact { word : "+" },
							valid_identifier { field : $temporary_name },
							parser.exact { word : ":" },
							space { preferred : True },
							parser.other {
								type : $expression
								alternate : $expression0
								field : $expression
							}
						]
					}
					apply_environment_to : [ environment.modified_environment {
						apply_to : [ environment.other_elements { fields : [ $expression ] } ]
						special_names : [
							free_name_from_field { field : $temporary_name },
							forbidden_name_from_field { field : $name }
						]
					} ]
					ensure_type_is : ensure_type.stop {}
				}
				template_override : Template syntax_element {
					alternatives : { extend_tmpl_attributes : Null  instantiate_tmpl_attributes : Null }

					pattern : parser.sequence {
						of : [
							space { preferred : True },
							valid_identifier { field : $name },
							space { preferred : True },
							parser.exact { word : "+:" },
							space { preferred : True },
							parser.exact { word : "{" },
							parser.accumulate_list {
								field : $overrides
								type : $attribute
								in : parser.many {
									of : parser.other {
										type : $attribute
										alternate : $extend_tmpl_attributes
										field : Null
									}
								}
							},
							space { preferred : True },
							parser.exact { word : "}" },
							space { preferred : True }
						]
					}
					apply_environment_to : [ environment.list_independent { field : $overrides } ]
					ensure_type_is : ensure_type.filter { types : [ known_types.template ] }
				}
				missing_attribute : Template syntax_element {
					alternatives : { new_tmpl_attributes : Null  extend_tmpl_attributes : Null }
					pattern : parser.sequence {
						of : [
							space { preferred : True },
							valid_identifier { field : $name },
							space { preferred : True },
							parser.exact { word : "?:" }
						]
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.stop {}
				}
				informative_attribute : Template syntax_element {
					alternatives : { new_tmpl_attributes : Null  extend_tmpl_attributes : Null  instantiate_tmpl_attributes : Null }
					pattern : parser.sequence {
						of : [
							space { preferred : True },
							valid_identifier { field : $name },
							space { preferred : True },
							parser.exact { word : "%:" }
						]
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.stop {}
				}
				remove_attribute : Template syntax_element {
					alternatives : { extend_tmpl_attributes : Null  instantiate_tmpl_attributes : Null }
					pattern : parser.sequence {
						of : [
							space { preferred : True },
							valid_identifier { field : $name },
							space { preferred : True },
							parser.exact { word : "-:" }
						]
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.stop {}
				}
			}
		}
		named_function_argument : Template syntax_group {
			environment_flavour : environment.flavour_simple
			is_typeable : True
			common +: {
				comment : common_fields.str
				name : common_fields.str
			}
			rules +: {
				plain_attribute : Template syntax_element {
					pattern : attribute_pattern {}
					apply_environment_to : [
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $expression ] } ]
						}
					]
					ensure_type_is : ensure_type.any { ensure_type_of : propagate { fields : [ $expression ] } }
				}
			}
		}
		fricassee_merge_input : Template syntax_group {
			environment_flavour : environment.flavour_simple
			is_typeable : True
			common +: {
				comment : common_fields.str
				name : common_fields.str
			}
			rules +: {
				expr_input : Template syntax_element {
					pattern : attribute_pattern { }
					apply_environment_to : [ environment.other_elements { fields : [ $expression ] } ]
					ensure_type_is : ensure_type.intrinsic { }
					type_demand : { expression : [ known_types.frame ] }
				}
				name_input : Template syntax_element {
					pattern : attribute_pattern {
						value_pattern : Template parser.exact { word : "Name" }
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.frame { types : [ known_types.str ] }
				}
				ordinal_input : Template syntax_element {
					pattern : attribute_pattern {
						value_pattern : Template parser.exact { word : "Ordinal" }
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
				}
			}
		}

		fricassee_ordering : Template syntax_group {
			environment_flavour : environment.flavour_simple
			common +: {
				comment : common_fields.str
			}
			rules +: {
				order_by : Template syntax_element {
					pattern : parser.sequence {
						of : [
							parser.exact { word : "Order" },
							space { mandatory : True },
							parser.exact { word : "By" },
							space { mandatory : True },
							parser.other {
								type: $expression
								alternate: $expression0
								field : $expression
							},
							space { mandatory : True }
						]
					}
					apply_environment_to : [ environment.other_elements { fields : [ $expression ] } ]
					type_demand : { expression : [ known_types.int, known_types.float, known_types.str ] }
				}
				reverse : Template syntax_element {
					pattern : parser.sequence {
						of : [ parser.exact { word : "Reverse" }, space { mandatory : True } ]
					}
					apply_environment_to : []
				}
			}
		}

		fricassee_result : Template syntax_group {
			environment_flavour : environment.flavour_double
			is_typeable : True
			common +: {
				comment : common_fields.str
			}
			rules +: {
				reduce : Template syntax_element {
					pattern : parser.sequence {
						of : [
							parser.accumulate_list {
								type : $fricassee_ordering
								field : $orderings
								in : parser.many {
									of : parser.other { type: $fricassee_ordering  field : Null }
								}
							},
							parser.exact { word : "Reduce" },
							space { mandatory : True },
							parser.other { type: $expression  alternate : $expression0  field : $reduce_expr },
							space { mandatory : True },
							parser.exact { word : "With" },
							space { mandatory : True },
							valid_identifier { field : $initial_name },
							space { preferred : True },
							parser.exact { word : ":" },
							space { preferred : True },
							parser.other { type: $expression  alternate : $expression2  field : $initial_expr }
						]
					}
					apply_environment_to : [
						environment.other_elements {
							fields : [ $initial_expr ]
							flavour : environment.flavour_double
							target_flavour : environment.flavour_simple
						},
						environment.list_of { field : $orderings },
						environment.modified_environment {
							special_names : [ mask_from_fields { name_field : $initial_name  expr_field : $initial_expr } ]
							apply_to : [ environment.other_elements { fields : [ $reduce_expr ] } ]
						}
					]
					ensure_type_is : ensure_type.propagate { fields : [ $reduce_expr, $initial_expr ] }
				}
				anonymous_select : Template syntax_element {
					pattern : parser.sequence {
						of : [
							parser.accumulate_list {
								type : $fricassee_ordering
								field : $orderings
								in : parser.many {
									of : parser.other { type: $fricassee_ordering  field : Null }
								}
							},
							parser.exact { word : "Select" },
							space { preferred : True },
							parser.other { type: $expression  alternate : $expression2 field : $expression },
							space { },
							parser.except { char : ":" }
						]
					}
					apply_environment_to : [
							environment.list_of { field : $orderings },
							environment.other_elements { fields : [ $expression ] }
						]
					ensure_type_is : ensure_type.frame { }
				}
				named_select : Template syntax_element {
					pattern : parser.sequence {
						of : [
							parser.exact { word : "Select" },
							space { mandatory : True },
							parser.other { type: $expression  alternate : $expression0 field : $name_expr },
							space { preferred : True },
							parser.exact { word : ":" },
							space { preferred : True },
							parser.other { type: $expression  alternate : $expression2 field : $value_expr }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $name_expr, $value_expr ] }
					]
					ensure_type_is : ensure_type.frame { }
					type_demand : {
						name_expr : [ known_types.int, known_types.str ]
						value_expr : known_types
					}
				}
			}
		}

		type : Template syntax_group {
			type_element : Template syntax_element {
				friendly_name ?:
				castable_from ?:
				type ?:
				pattern : parser.exact { word : friendly_name }
			}
			rules +: {
				bool : Template type_element {
					friendly_name : "Bool"
					type : known_types.bool
					castable_from : [ ]
				}
				float : Template type_element {
					friendly_name : "Float"
					type : known_types.float
					castable_from : [ known_types.int ]
				}
				frame : Template type_element {
					friendly_name : "Frame"
					type : known_types.frame
					castable_from : [ ]
				}
				int : Template type_element {
					friendly_name : "Int"
					type : known_types.int
					castable_from : [ known_types.float ]
				}
				str : Template type_element {
					friendly_name : "Str"
					type : known_types.str
					castable_from : [ known_types.bool, known_types.float, known_types.int ]
				}
				tmpl : Template type_element {
					friendly_name : "Template"
					type : known_types.template
					castable_from : [ ]
				}
			}
		}

		time : Template syntax_group {
			generation_parameters : {
				existing : known_types.int
			}
			time_chunk : Template syntax_element {
				unit ?:
				symbol ?:
				pattern : int_with_unit_tmpl {}
				code_value : kws.int_add {
					left : codegen.parameter { name : $existing }
					right : kws.numeric_constant_units {
						type : known_types.int
						field : $count
					}
				}
			}
			rules +: {
				days : Template time_chunk { symbol : "d"  unit : 60 * 60 * 24 }
				hours : Template time_chunk { symbol : "h"  unit : 60 * 60 }
				minutes : Template time_chunk { symbol : "m"  unit : 60 }
				seconds : Template time_chunk { symbol : "s"  unit : 1 }
			}
		}

		string_piece : Template syntax_group {
			environment_flavour : environment.flavour_simple
			generation_parameters : {
				str : known_types.str
				context : known_vm_types.list
				self_frame : known_types.frame
				container_frame : known_types.frame
			}
			common +: {
				comment : common_fields.str
			}
			string_escape_tmpl : Template parser.collect_codepoint {
				char ?:
				in : parser.exact { word : "\\\\" & char }
			}
			rules +: {
				literal_string : Template syntax_element {
					pattern : parser.accumulate_string {
						field : $text
						in : parser.alternate {
							of : [
								string_escape_tmpl { char : "a"  codepoint : 7 },
								string_escape_tmpl { char : "b"  codepoint : 8 },
								string_escape_tmpl { char : "f"  codepoint : 12 },
								string_escape_tmpl { char : "n" codepoint : 10 },
								string_escape_tmpl { char : "r" codepoint : 13 },
								string_escape_tmpl { char : "t" codepoint : 9 },
								string_escape_tmpl { char : "v"  codepoint : 11 },
								string_escape_tmpl { char : "\\\""  codepoint : 34 },
								string_escape_tmpl { char : "\\\\"  codepoint : 92 },
								parser.accumulate_unichar_integer {
									multiplier : 8
									offset : 48
									in : parser.sequence {
										of : [
											parser.exact { word : "\\\\" },
											parser.range { from : "0"  to : "7"  accumulate : True},
											parser.range { from : "0"  to : "7"  accumulate : True},
											parser.range { from : "0"  to : "7"  accumulate : True}
										]
									}
								},
								parser.accumulate_unichar_integer {
									in : parser.sequence {
										of : [
											parser.exact { word : "\\\\x" },
											hex_digit { },
											hex_digit { }
										]
									}
								},
								parser.accumulate_unichar_integer {
									in : parser.sequence {
										of : [
											parser.exact { word : "\\\\u" },
											hex_digit { },
											hex_digit { },
											hex_digit { },
											hex_digit { }
										]
									}
								},
								parser.single { char : "\\\\\\\""  invert_match : True }
							]
						}
					}
					apply_environment_to : [ ]
					code_value : kws.string_concatenate {
						first : codegen.parameter { name : $str }
						second : kws.string_constant_from_field { field : $text }
					}
				}
				expression_escape : Template syntax_element {
					pattern : parser.sequence {
						of : [
							parser.exact { word : "\\\\(" },
							space { },
							parser.other {
								type : $expression
								alternate : $expression0
								field : $expression
							},
							space { },
							parser.exact { word : ")" }
						]
					}
					apply_environment_to : [ environment.other_elements { fields : [ $expression ] } ]
					type_demand : { expression : [ known_types.bool, known_types.float, known_types.int, known_types.str ] }
					code_value : kws.string_concatenate {
						first : codegen.parameter { name : $str }
						second : kws.cast_to_string {
							source : codegen.other_expression { field : $expression }
						}
					}
				}
			}
		}

		identifier : Template syntax_group {
			common +: {
				comment : common_fields.str
			}
			rules +: {
				literal_identifier : Template syntax_element {
					pattern : parser.sequence {
						of : [
							space { },
							valid_identifier { field : $name }
						]
					}
				}
			}
		}

		arithmetic_disjunction_term : Template syntax_group {
			level : 8
			environment_flavour : environment.flavour_simple
			is_typeable : True
			generation_parameters : {
				context : known_vm_types.list
				self_frame : known_types.frame
				container_frame : known_types.frame
				left : known_vm_types.any
			}
			common +: {
				comment : common_fields.str
			}
			rules +: {
				addition_term : Template long_term_tmpl {
					symbol : "+"
					integer_operation : kws.int_add
					float_operation : kws.float_add
				}
				subtraction_term : Template long_term_tmpl {
					symbol : "-"
					integer_operation : kws.int_subtract
					float_operation : kws.float_subtract
				}
			}
		}

		arithmetic_conjunction_term : Template syntax_group {
			level : 9
			environment_flavour : environment.flavour_simple
			is_typeable : True
			generation_parameters : {
				context : known_vm_types.list
				self_frame : known_types.frame
				container_frame : known_types.frame
				left : known_vm_types.any
			}
			common +: {
				comment : common_fields.str
			}
			rules +: {
				multiplication_term : Template long_term_tmpl {
					symbol : "*"
					integer_operation : kws.int_multiply
					float_operation : kws.float_multiply
				}
				division_term : Template long_term_tmpl {
					symbol : "/"
					integer_operation : kws.int_divide
					float_operation : kws.float_divide
				}
				modulus_term : Template long_term_tmpl {
					symbol : "%"
					integer_operation : kws.int_modulus
					float_operation : kws.float_modulus
				}
			}
		}

		expression : Template syntax_group {
			include_base_parser : False
			is_typeable : True
			environment_flavour : environment.flavour_simple

			generation_parameters : {
				context : known_vm_types.list
				self_frame : known_types.frame
				container_frame : known_types.frame
			}

			common +: {
				comment : common_fields.str
			}
			max_level : 19
			static_rules : For level : 0 Through (max_level - 1)
				Select "zzzz_up_\(level)" : meandering_element {
					alternate_name : "expression\(level + 1)"
					alternatives : For x : [level] Select "expression\(x)" : Null
				}
			rules +: {
				let : Template expression_tmpl {
					level : 0
					pattern : parser.sequence {
						of : [
							parser.exact { word : "Let" },
							space { mandatory : True },
							parser.accumulate_list {
								type : $attribute
								field : $definitions
								in : parser.many_word {
									of : parser.other { type : $attribute  alternate : $plain_attribute  field : Null }
									separator_word : ","
									nonempty : True
								}
							},
							space { mandatory : True },
							parser.exact { word : "In" },
							space { mandatory : True },
							sibling_expression { field : $expression }
						]
					}
					apply_environment_to : [
						environment.list_of { field : $definitions },
						environment.modified_environment {
							force_back : True
							special_names : [ masks_from_attributes { field : $definitions } ]
							apply_to : [ environment.other_elements { fields : [ $expression ] } ]
						}
					]
					ensure_type_is : ensure_type.propagate { fields : [ $expression ] }
					type_demand_all : { definitions : known_types }
				}


				for_each : Template expression_tmpl {
					level : 1
					pattern : for_pattern {
						selector : Template parser.sequence {
							of : [
								parser.exact { word : "Each" },
								space { preferred : True },
								parser.other { type: $expression  alternate : $expression0 field : $each_expr }
							]
						}
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $each_expr ] },
						environment.other_elements { fields : [ $result_builder ]  target_flavour : environment.flavour_double },
						environment.blank_environment {
							apply_to : [
								environment.other_elements { fields : [ $where_expr ] },
								environment.modified_environment {
									apply_to : [ environment.other_elements { fields : [ $result_builder ] } ]
								}
							]
						}
					]
					ensure_type_is : ensure_type.propagate { fields : [ $result_builder ] }
					type_demand : {
						where_expr : [ known_types.bool ]
						each_expr : [ known_types.frame ]
					}
				}
				for_merge : Template expression_tmpl {
					level : 1
					pattern : for_pattern {
						selector : Template parser.accumulate_list {
							field : $inputs
							type : $fricassee_merge_input
							in : parser.many_word {
								of : parser.other {
									type : $fricassee_merge_input
									field : Null
								}
								separator_word : ","
							}
						}
					}
					apply_environment_to : [
						environment.list_of { field : $inputs },
						environment.other_elements { fields : [ $result_builder ]  target_flavour : environment.flavour_double },
						environment.modified_environment {
							apply_to : [
								environment.other_elements { fields : [ $where_expr ] },
								environment.modified_environment {
									apply_to : [ environment.other_elements { fields : [ $result_builder ] } ]
								}
							]
							special_names : [ masks_from_attributes { field : $inputs } ]
						}
					]
					ensure_type_is : ensure_type.propagate { fields : [ $result_builder ] }
					type_demand : {
						where_expr : [ known_types.bool ]
					}
				}

				if : Template expression_tmpl {
					level : 2
					pattern : parser.sequence {
						of : [
							parser.exact { word : "If" },
							space { mandatory : True },
							top_expression { field : $cond_expr },
							space { mandatory : True },
							parser.exact { word : "Then" },
							space { mandatory : True },
							top_expression { field : $then_expr },
							space { mandatory : True },
							parser.exact { word : "Else" },
							space { mandatory : True },
							sibling_expression { field : $else_expr }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $cond_expr ] },
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $then_expr ] } ]
						},
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $else_expr ] } ]
						}
					]
					ensure_type_is : ensure_type.propagate { fields : [ $then_expr, $else_expr ] }
					type_demand : { cond_expr : [ known_types.bool ] }
					code_value : kws.conditional {
						condition : codegen.other_expression { field : $cond_expr }
						true_action : codegen.other_expression { field : $then_expr }
						false_action : codegen.other_expression { field : $else_expr }
					}
				}

				concatenate : Template binary_operator {
					level : 3
					operator : "&"
					right_operand : Template sibling_expression {}
					ensure_type_is : ensure_type.filter { types : [ known_types.str ] }
					type_demand : {
						left : [ known_types.bool, known_types.float, known_types.int, known_types.str ]
						right : [ known_types.bool, known_types.float, known_types.int, known_types.str ]
					}
					code_value : kws.string_concatenate {
						first : kws.cast_to_string {
							source : codegen.other_expression { field : $left }
						}
						second : kws.cast_to_string {
							source : codegen.other_expression { field : $right }
						}
					}
				}

				disjunction : Template binary_operator {
					level : 4
					operator : "||"
					right_operand : Template sibling_expression {}
					apply_environment_to : [
						environment.other_elements { fields : [ $left ] },
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $right ] } ]
						}
					]
					ensure_type_is : ensure_type.bool {}
					type_demand : {
						left : [ known_types.bool ]
						right : [ known_types.bool ]
					}
					code_value : kws.conditional {
						condition : codegen.other_expression { field : $left }
						true_action : kws.numeric_constant {
							type : known_types.int
							number : max
						}
						false_action : codegen.other_expression { field : $right }
					}
				}

				conjunction : Template binary_operator {
					level : 5
					operator : "&&"
					right_operand : Template sibling_expression {}
					apply_environment_to : [
						environment.other_elements { fields : [ $left ] },
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $right ] } ]
						}
					]
					ensure_type_is : ensure_type.bool {}
					type_demand : {
						left : [ known_types.bool ]
						right : [ known_types.bool ]
					}
					code_value : kws.conditional {
						condition : codegen.other_expression { field : $left }
						true_action : codegen.other_expression { field : $right }
						false_action : kws.numeric_constant {
							type : known_types.int
							number : min
						}
					}
				}

				equality : Template compare_operator {
					level : 6
					operator : "=="
					number : 0
					invert : False
				}
				inequality : Template compare_operator {
					level : 6
					operator : "!="
					number : 0
					invert : True
				}
				greater : Template compare_operator {
					level : 6
					operator : ">"
					number : 1
					invert : False
				}
				greater_or_equality : Template compare_operator {
					level : 6
					operator : ">="
					number : -1
					invert : True
				}
				lesser : Template compare_operator {
					level : 6
					operator : "<"
					number : -1
					invert : False
				}
				lesser_or_equality : Template compare_operator {
					level : 6
					operator : "<="
					number : 1
					invert : True
				}

				compare : Template binary_operator {
					level : 7
					operator : "<=>"
					type_demand : {
						left : [ known_types.bool, known_types.float, known_types.int, known_types.str  ]
						right : left
					}
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
					code_value : kws.compare {
						left : codegen.other_expression { field : $left }
						right : codegen.other_expression { field : $right }
					}
				}

				arithmetic_disjunction : Template long_expression_tmpl {
					level : 8
					term_type : $arithmetic_disjunction_term
				}

				arithmetic_conjunction : Template long_expression_tmpl {
					level : 9
					term_type : $arithmetic_conjunction_term
				}

				range : Template binary_operator {
					level : 10
					operator : "Through"
					ensure_type_is : ensure_type.frame { }
					type_demand : {
						left : [ known_types.int ]
						right : [ known_types.int ]
					}
				}

				coerce : Template type_operator {
					level : 11
					operator : "To"
					ensure_type_is : ensure_type.dynamic {
						field : $right
						propagate_castable : True
						ensure_type_of : propagate { fields : [ $left ] }
					}
					code_value : codegen.type_dispatch {
						of : codegen.other_expression { field : $left }
						define : $left_result
						choices : [
							# Int → *
							choice_tmpl {
								type : known_types.int
								action : codegen.type_dispatch_parsed {
									field : $right
									choices : [
										# Int → Int
										choice_tmpl {
											type : known_types.int
											action : codegen.parameter { name : $left_result }
										},
										# Int → Float
										choice_tmpl {
											type : known_types.float
											action : kws.int_to_float {
												expr : codegen.parameter { name : $left_result }
											}
										},
										# Int → Str
										choice_tmpl {
											type : known_types.str
											action : kws.cast_to_string {
												source : codegen.parameter { name : $left_result }
											}
										}
									]
								}
							},
							# Float → *
							choice_tmpl {
								type : known_types.float
								action : codegen.type_dispatch_parsed {
									field : $right
									choices : [
										# Float → Float
										choice_tmpl {
											type : known_types.float
											action : codegen.parameter { name : $left_result }
										},
										# Float → Int
										choice_tmpl {
											type : known_types.int
											action : kws.float_to_int {
												expr : codegen.parameter { name : $left_result }
											}
										},
										# Float → Str
										choice_tmpl {
											type : known_types.str
											action : kws.cast_to_string {
												source : codegen.parameter { name : $left_result }
											}
										}
									]
								}
							},
							# Bool → *
							choice_tmpl {
								type : known_types.bool
								action : codegen.type_dispatch_parsed {
									field : $right
									choices : [
										# Bool → Bool
										choice_tmpl {
											type : known_types.bool
											action : codegen.parameter { name : $left_result }
										},
										# Bool → Str
										choice_tmpl {
											type : known_types.str
											action : kws.cast_to_string {
												source : codegen.parameter { name : $left_result }
											}
										}
									]
								}
							},
							# Frame → *
							choice_tmpl {
								type : known_types.frame
								action : codegen.type_dispatch_parsed {
									field : $right
									choices : [
										choice_tmpl {
											type : known_types.frame
											action : codegen.parameter { name : $left_result }
										}
									]
								}
							},
							# Template → *
							choice_tmpl {
								type : known_types.template
								action : codegen.type_dispatch_parsed {
									field : $right
									choices : [
										choice_tmpl {
											type : known_types.template
											action : codegen.parameter { name : $left_result }
										}
									]
								}
							}
						]
					}
				}
				enforce : Template type_operator {
					level : 11
					operator : "As"
					ensure_type_is : ensure_type.dynamic {
						field : $right
						ensure_type_of : ensure_type.propagate { fields : [ $left ] }
					}
					code_value : codegen.other_expression { field : $left }
				}
				check : Template type_operator {
					level : 11
					operator : "Is"
					ensure_type_is : ensure_type.bool {}
					type_demand : { left : known_types }
					code_value : codegen.type_dispatch_parsed {
						field : $right
						choices : For t : known_types
							Select choice_tmpl {
								type : t
								action : codegen.type_dispatch {
									of : codegen.other_expression { field : $left }
									default_action : kws.numeric_constant { type : known_types.bool  number : min }
									choices : [
										choice_tmpl {
											type : t
											action : kws.numeric_constant { type : known_types.bool  number : max }
										}
									]
								}
							}
					}
				}
				is_finite : Template is_suffix_operator {
					level : 11
					suffix : "Finite"
					ensure_type_is : ensure_type.bool {}
					type_demand : { left : [ known_types.float, known_types.int ] }
					code_value : codegen.type_dispatch {
						of : codegen.other_expression { field : $left }
						define : $left_result
						choices : [
							choice_tmpl {
								type : known_types.int
								action : kws.numeric_constant {
									type : known_types.bool
									number : max
								}
							},
							choice_tmpl {
								type : known_types.float
								action : kws.float_is_finite {
									source : codegen.parameter { name : $left_result }
								}
							}
						]
					}
				}
				is_nan : Template is_suffix_operator {
					level : 11
					suffix : "NaN"
					ensure_type_is : ensure_type.bool {}
					type_demand : { left : [ known_types.float, known_types.int ] }
					code_value : codegen.type_dispatch {
						of : codegen.other_expression { field : $left }
						define : $left_result
						choices : [
							choice_tmpl {
								type : known_types.int
								action : kws.numeric_constant {
									type : known_types.bool
									number : min
								}
							},
							choice_tmpl {
								type : known_types.float
								action : kws.float_is_nan {
									source : codegen.parameter { name : $left_result }
								}
							}
						]
					}
				}
				is_null : Template is_suffix_operator {
					level : 11
					suffix : "Null"
					ensure_type_is : ensure_type.bool {}
					type_demand : { left : known_types }
					code_value : codegen.type_dispatch {
						of : codegen.other_expression { field : $left }
						default_action : kws.numeric_constant {
							type : known_types.bool
							number : min
						}
						choices : [
							choice_tmpl {
								type : known_types.unit
								action : kws.numeric_constant {
									type : known_types.bool
									number : min
								}
							}
						]
					}
				}

				error : Template unary_tmpl {
					level : 12
					operator : "Error"
					ensure_type_is : ensure_type.stop {}
					type_demand : { expr : [ known_types.bool, known_types.float, known_types.int, known_types.str ] }
					code_value : kws.error {
						message : kws.cast_to_string {
							source : codegen.other_expression { field : $expr }
						}
					}
				}
				length : Template unary_tmpl {
					level : 12
					operator : "Length"
					ensure_type_is : ensure_type.stop {}
					type_demand : { expr : [ known_types.bool, known_types.float, known_types.int, known_types.str ] }
					code_value : kws.string_length {
						source : kws.cast_to_string {
							source : codegen.other_expression { field : $expr }
						}
					}
				}

				remote_lookup : Template expression_tmpl {
					level : 13
					pattern : parser.sequence {
						of : [
							parser.exact { word : "Lookup" },
							space { mandatory : True },
							parser.accumulate_list {
								type : $identifier
								field : $names
								in : parser.many_word {
									of : parser.other {
										type : $identifier
										field : Null
									}
									separator_word : "."
								}
							},
							space { mandatory : True },
							parser.exact { word : "In" },
							space { mandatory : True },
							sibling_expression { field : $expression }
						]
					}
					apply_environment_to : [ environment.other_elements { fields : [ $expression ] } ]
					ensure_type_is : ensure_type.any {}
					type_demand : { expression : [ known_types.frame ] }
					code_value : kws.lookup_field {
						field : $parts
						source : kws.frame_context {
							source : codegen.other_expression { field : $expression }
						}
					}
				}

				instantiation : Template expression_tmpl {
					level : 14
					pattern : parser.sequence {
						of : [
							child_expression { field : $source },
							space { preferred : True },
							parser.exact { word : "{" },
							parser.accumulate_list {
								field : $attributes
								type : $attribute
								deduplicate : expanded_groups.attribute.expanded_common.name
								in : parser.many {
									of : parser.other {
										type : $attribute
										field : Null
										alternate : $instantiate_tmpl_attributes
									}
								}
							},
							space { preferred : True },
							parser.exact { word : "}" }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $source ] },
						environment.list_independent { field : $attributes }
					]
					ensure_type_is : ensure_type.frame {}
					type_demand : { source : [ known_types.template ] }
					type_demand_all : { attributes : known_types }
				}

				coalesce : Template binary_operator {
					level : 15
					operator : "??"
					apply_environment_to : [
						environment.other_elements { fields : [ $left ] },
						environment.modified_environment {
							apply_to : [ environment.other_elements { fields : [ $right ] } ]
						}
					]
					ensure_type_is : ensure_type.multiple {
						actions : [
							ensure_type.propagate { fields : [ $right ] },
							ensure_type.propagate {
								extra_types : [ known_types.unit ]
								fields : [ $left ]
							}
						]
					}
					code_value : codegen.type_dispatch {
						of : codegen.other_expression { field : $left }
						define : $left_result
						default_action : codegen.parameter { name : $left_result }
						choices : [
							choice_tmpl {
								type : known_types.unit
								action : codegen.other_expression { field : $right }
							}
						]
					}
				}

				literal_frame : Template expression_tmpl {
					level : 16
					pattern : parser.sequence {
						of : [
							parser.exact { word : "{" },
							space { preferred : True },
							parser.accumulate_list {
								field : $attributes
								type : $attribute
								deduplicate : expanded_groups.attribute.expanded_common.name
								in : parser.many {
									of : parser.other {
										type : $attribute
										field : Null
										alternate : $plain_attribute
									}
								}
							},
							space { preferred : True },
							parser.exact { word : "}" }
						]
					}
					apply_environment_to : [ environment.list_of { field : $attributes } ]
					ensure_type_is : ensure_type.frame {}
					type_demand_all : { attributes : known_types }
				}
				not : Template unary_tmpl {
					level : 16
					operator : "!"
					ensure_type_is : ensure_type.bool { ensure_type_of : propagate { fields : [ $expr ] } }
					code_value : kws.bool_negate {
						source : codegen.other_expression { field : $expr }
					}
				}
				negation : Template unary_tmpl {
					level : 16
					operator : "-"
					ensure_type_is : ensure_type.number { ensure_type_of : propagate { fields : [ $expr ] } }
					code_value : codegen.type_dispatch {
						of : codegen.other_expression { field : $expr }
						define : $expr_result
						choices : [
							choice_tmpl {
								type : known_types.int
								action : kws.int_negate {
									source : codegen.parameter { name : $expr_result }
								}
							},
							choice_tmpl {
								type : known_types.float
								action : kws.float_negate {
									source : codegen.parameter { name : $expr_result }
								}
							}
						]
					}
				}
				generate_id : Template unary_tmpl {
					level : 16
					operator : "GenerateId"
					ensure_type_is : ensure_type.filter { types : [ known_types.str ] }
					type_demand : { expr : [ known_types.frame ] }
					code_value : kws.frame_id {
						source : codegen.other_expression { field : $expr }
					}
				}
				template_new : Template expression_tmpl {
					level : 16
					pattern : parser.sequence {
						of : [
							parser.exact { word : "Template" },
							space { preferred : True },
							parser.exact { word : "{" },
							parser.accumulate_list {
								field : $attributes
								type : $attribute
								deduplicate : expanded_groups.attribute.expanded_common.name
								in : parser.many {
									of : parser.other {
										type : $attribute
										field : Null
										alternate : $new_tmpl_attributes
									}
								}
							},
							space { preferred : True },
							parser.exact { word : "}" }
						]
					}
					apply_environment_to : [ environment.list_independent { field : $attributes } ]
					ensure_type_is : ensure_type.filter { types : [ known_types.template ] }
					type_demand_all : { attributes : known_types }
				}
				template_extend : Template expression_tmpl {
					level : 16
					pattern : parser.sequence {
						of : [
							parser.exact { word : "Template" },
							space { mandatory : True },
							child_expression { field : $source },
							space { preferred : True },
							parser.exact { word : "{" },
								parser.accumulate_list {
								field : $attributes
								type : $attribute
								deduplicate : expanded_groups.attribute.expanded_common.name
								in : parser.many {
									of : parser.other {
										type : $attribute
										field : Null
										alternate : $extend_tmpl_attributes
									}
								}
							},
							space { preferred : True },
							parser.exact { word : "}" }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $source ] },
						environment.list_independent { field : $attributes }
					]
					ensure_type_is : ensure_type.filter {
						types : [ known_types.template ]
						ensure_type_of : propagate { fields : [ $source ] }
					}
					type_demand_all : { attributes : known_types }
				}

				function_anonymous : Template expression_tmpl {
					level : 17
					pattern : parser.sequence {
						of : [
							child_expression { field : $func_expr },
							space { },
							parser.exact { word : "(" },
							parser.accumulate_list {
								field : $args
								type : $expression
								in : parser.many_word {
									of : parser.sequence {
										of : [
											space { preferred : True },
											top_expression { field : Null },
											space { }
										]
									}
									separator_word : ","
								}
							},
							space { },
							parser.exact { word : ")" }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $func_expr ] },
						environment.list_of { field : $args }
					]
					ensure_type_is : ensure_type.any { }
					type_demand : { func_expr : [ known_types.template ] }
					type_demand_all : { args : known_types }
				}
				function_named : Template expression_tmpl {
					level : 17
					pattern : parser.sequence {
						of : [
							child_expression { field : $func_expr },
							space { },
							parser.exact { word : "(" },
							parser.accumulate_list {
								field : $args
								type : $named_function_argument
								deduplicate : expanded_groups.named_function_argument.expanded_common.name
								forbid : [ $value ]
								in : parser.many_word {
									of : parser.sequence {
										of : [
											parser.other {
												type : $named_function_argument
												field : Null
											},
											space { }
										]
									}
									separator_word : ","
								}
							},
							parser.exact { word : ")" }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $func_expr ] },
						environment.list_of { field : $args }
					]
					ensure_type_is : ensure_type.any { }
					type_demand : { func_expr : [ known_types.template ] }
					type_demand_all : { args : known_types }
				}
				function_mixed : Template expression_tmpl {
					level : 17
					pattern : parser.sequence {
						of : [
							child_expression { field : $func_expr },
							space { },
							parser.exact { word : "(" },
							parser.accumulate_list {
								field : $anon_args
								type : $expression
								in : parser.many_word {
									nonempty : True
									of : parser.sequence {
										of : [
											space { preferred : True },
											top_expression { field : Null },
											space { },
											parser.except { char : ":" }
										]
									}
									separator_word : ","
								}
							},
							parser.exact { word : "," },
							parser.accumulate_list {
								field : $named_args
								type : $named_function_argument
								deduplicate : expanded_groups.named_function_argument.expanded_common.name
								forbid : [ $args, $value ]
								in : parser.many_word {
									nonempty : True
									of : parser.sequence {
										of : [
											parser.other {
												type : $named_function_argument
												field : Null
											},
											space { }
										]
									}
									separator_word : ","
								}
							},
							parser.exact { word : ")" }
						]
					}
					apply_environment_to : [
						environment.other_elements { fields : [ $func_expr ] },
						environment.list_of { field : $anon_args },
						environment.list_of { field : $named_args }
					]
					ensure_type_is : ensure_type.any { }
					type_demand : { func_expr : [ known_types.template ] }
					type_demand_all : {
						anon_args : known_types
						named_args : known_types
					}
				}

				contextual_lookup : Template expression_tmpl {
					level : 18
					pattern : parser.accumulate_list {
						field : $parts
						type : $identifier
						in : parser.many_word {
							of : parser.other {
								type : $identifier
								field : Null
							}
							separator_word : "."
							nonempty : True
						}
					}
					apply_environment_to : []
					ensure_type_is : ensure_type.stored {
						field : $parts
					}
				}
				from : Template expression_tmpl {
					level : 18
					pattern : parser.sequence {
						of : [
							parser.exact { word : "From" },
							space { mandatory : True },
							parser.accumulate_string {
								field : $uri
								in : parser.sequence {
									accumulate : True
									of : [
										parser.many {
											of : parser.alternate {
												of : [
													parser.range { from : "A"  to : "Z" },
													parser.range { from : "a"  to : "z" },
													parser.range { from : "0"  to : "9" },
													parser.single { char : "-.+" }
												]
											}
										},
										parser.single { char : ":" },
										parser.many {
											of : parser.alternate {
												of : [
													parser.range { from : "A"  to : "Z" },
													parser.range { from : "a"  to : "z" },
													parser.range { from : "0"  to : "9" },
													parser.single { char : "~=-,;!?/.'()[]@$*&#%+" }
												]
											}
										}
									]
								}
							}
						]
					}
					apply_environment_to : []
					ensure_type_is : ensure_type.any {}
				}
				direct_lookup : Template expression_tmpl {
					level : 18
					pattern : parser.sequence {
						of : [
							child_expression { field : $expr },
							space { },
							parser.exact { word : "." },
							parser.accumulate_list {
								type : $identifier
								field : $names
								in : parser.many_word {
									of : parser.other {
										type : $identifier
										field : Null
									}
									separator_word : "."
									nonempty : True
								}
							}
						]
					}
					apply_environment_to : [ environment.other_elements { fields : [ $expr ] } ]
					ensure_type_is : ensure_type.any {}
					type_demand : { expr : [ known_types.frame ] }
					code_value : kws.lookup_field {
						field : $names
						source : kws.list_prepend {
							frame : codegen.other_expression { field : $expr }
							tail : kws.list_null {}
						}
					}
				}

				subexpression : Template expression_tmpl {
					level : max_level
					pattern : parser.sequence {
						of : [
							parser.exact { word : "(" },
							space { },
							top_expression { field : $expression },
							space { },
							parser.exact { word : ")" }
						]
					}
					apply_environment_to : [ environment.other_elements { fields : [ $expression ] } ]
					ensure_type_is : ensure_type.propagate { fields : [ $expression ] }
					code_value : codegen.other_expression { field : $expression }
				}
				literal_list : Template expression_tmpl {
					level : max_level
					pattern : parser.sequence {
						of : [
							parser.exact { word : "[" },
							parser.accumulate_list {
								field : $items
								type : $expression
								in : parser.many_word {
									separator_word : ","
									of : parser.sequence {
										of : [
											space { preferred : True },
											top_expression { field : Null },
											space { }
										]
									}
								}
							},
							space { preferred : True },
							parser.exact { word : "]" }
						]
					}
					apply_environment_to : [ environment.list_of { field : $items } ]
					ensure_type_is : ensure_type.frame { }
					type_demand_all : { items : known_types }
				}

				container : Template literal_tmpl {
					name : "Container"
					ensure_type_is : ensure_type.frame { }
					code_value : codegen.parameter {
						name : $self_frame
						error : "Already at the outermost frame. “Container” has no meaning here."
					}
				}
				false : Template literal_tmpl {
					name : "False"
					ensure_type_is : ensure_type.bool { }
					code_value : kws.numeric_constant {
						type : known_types.bool
						number : min
					}
				}
				float_max : Template literal_tmpl {
					name : "FloatMax"
					ensure_type_is : ensure_type.filter { types : [ known_types.float ] }
					code_value : kws.numeric_constant {
						type : known_types.float
						number : max
					}
				}
				float_min : Template literal_tmpl {
					name : "FloatMin"
					ensure_type_is : ensure_type.filter { types : [ known_types.float ] }
					code_value : kws.numeric_constant {
						type : known_types.float
						number : min
					}
				}
				id : Template literal_tmpl {
					name : "Id"
					ensure_type_is : ensure_type.filter { types : [ known_types.str ] }
					code_value : kws.frame_id {
						source : codegen.parameter { name : $self_frame }
					}
				}
				infinity : Template literal_tmpl {
					name : "Infinity"
					ensure_type_is : ensure_type.filter { types : [ known_types.float ] }
					code_value : kws.infinity_constant {}
				}
				int_max : Template literal_tmpl {
					name : "IntMax"
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
					code_value : kws.numeric_constant {
						type : known_types.int
						number : max
					}
				}
				int_min : Template literal_tmpl {
					name : "IntMin"
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
					code_value : kws.numeric_constant {
						type : known_types.int
						number : min
					}
				}
				nan : Template literal_tmpl {
					name : "NaN"
					ensure_type_is : ensure_type.filter { types : [ known_types.float ] }
					code_value : kws.nan_constant {}
				}
				null : Template literal_tmpl {
					name : "Null"
					ensure_type_is : ensure_type.filter { types : [ known_types.unit ] }
					code_value : kws.null_constant {}
				}
				this : Template literal_tmpl {
					name : "This"
					ensure_type_is : ensure_type.frame { }
					code_value : codegen.parameter {
						name : $self_frame
					}
				}
				true : Template literal_tmpl {
					name : "True"
					ensure_type_is : ensure_type.bool { }
					code_value : kws.numeric_constant {
						type : known_types.bool
						number : max
					}
				}

				time_literal : Template expression_tmpl {
					level : max_level
					pattern : parser.accumulate_list {
						field : $parts
						type : $time
						in : parser.many {
							of : parser.other {
								type : $time
								accumulate : True
								field : Null
							}
							nonempty : True
						}
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
					code_value : codegen.fold_others {
						arguments : {
							existing : fold_argument
						}
						field : $parts
						initial : kws.numeric_constant {
							type : known_types.int
							number : 0
						}
					}
				}
				integer_literal : Template expression_tmpl {
					level : max_level
					pattern : parser.accumulate_integer {
						field : $amount
						in : parser.sequence {
							of : [
								valid_number {},
								parser.except { char : ".eGMkdhms" }
							]
						}
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
					code_value : kws.numeric_constant {
						type : known_types.int
						number : $amount
					}
				}
				hex_integer_literal : Template expression_tmpl {
					level : max_level
					pattern : parser.accumulate_integer {
						field : $amount
						in : parser.sequence {
							of : [
									parser.exact { word : "0x" },
									parser.many {
										nonempty : True
										of : hex_digit { }
									}
								]
						}
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.filter { types : [ known_types.int ] }
					code_value : kws.numeric_constant {
						type : known_types.int
						number : $amount
					}
				}
				int_k : Template int_with_unit_expr_tmpl { symbol : "k"  unit : 1000 }
				int_m : Template int_with_unit_expr_tmpl { symbol : "M"  unit : 1000 * 1000 }
				int_g : Template int_with_unit_expr_tmpl { symbol : "G"  unit : 1000 * 1000 * 1000 }
				int_ki : Template int_with_unit_expr_tmpl { symbol : "ki"  unit : 1024 }
				int_mi : Template int_with_unit_expr_tmpl { symbol : "Mi"  unit : 1024 * 1024 }
				int_gi : Template int_with_unit_expr_tmpl { symbol : "Gi"  unit : 1024 * 1024 * 1024 }
				float_literal : Template expression_tmpl {
					level : max_level
					pattern : parser.accumulate_float {
						field : $value
						in : parser.sequence {
							accumulate : True
							of : [
								valid_number {},
								parser.single { char : "." },
								parser.many {
									of : parser.range { from : "0" to : "9" }
								},
								parser.optional {
									of : parser.sequence {
										of : [
											parser.single { char : "eE" },
											parser.optional {
												of : parser.single { char : "-" }
											},
											valid_number {}
										]
									}
								}
							]
						}
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.filter { types : [ known_types.float ] }
					code_value : kws.numeric_constant {
						type : known_types.float
						number : $value
					}
				}

				string_identifier : Template expression_tmpl {
					level : max_level
					pattern : parser.sequence {
						of : [
							parser.exact { word : "$" },
							valid_identifier { field : $name }
						]
					}
					apply_environment_to : [ ]
					ensure_type_is : ensure_type.filter { types : [ known_types.str ] }
					code_value : kws.string_constant_from_field {
						field : $name
					}
				}
				string_literal : Template expression_tmpl {
					level : max_level
					pattern : parser.sequence {
						of : [
							parser.exact { word : "\\\"" },
							parser.accumulate_list {
								field : $parts
								type : $string_piece
								in : parser.many {
									of : parser.other {
										type : $string_piece
										field : Null
									}
								}
							},
							parser.exact { word : "\\\"" }
						]
					}
					apply_environment_to : [ environment.list_of { field : $parts } ]
					ensure_type_is : ensure_type.filter { types : [ known_types.str ] }
					code_value : codegen.fold_others {
						arguments : {
							str : fold_argument
							context : codegen.parameter { name : $context }
							self_frame : codegen.parameter { name : $self_frame }
							container_frame : codegen.parameter { name : $container_frame }
						}
						field : $parts
						initial : kws.string_constant { str : "" }
					}
				}
			}
		}
	}
}
