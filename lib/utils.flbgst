# Return the conjunction (and) of the arguments.
all : allifier(base : identity)

# Convert a function-like template from one that returns a list of Booleans to
# a conjunctions (and).
allifier : Template {
	base ?:
	value : Template base {
		value +original: For item : original Reduce acc && item With acc : True
	}
}

# Return the disjunction (or) of the arguments.
any : anyifier(base : identity)

# Convert a function-like template from one that returns a list of Booleans to
# a disjunction (or).
anyifier : Template {
	base ?:
	value : Template base {
		value +original: For item : original Reduce acc || item With acc : False
	}
}

# Count the number of items in a frame.
count : firstifier(base : count_list)

# Count the number of item in a list of frames.
count_list : Template {
	args ?:
	value :
		For arg : args, arg_name : Name
		Select
			arg_name : (For x : arg Reduce k + 1 With k : 0)
}

# Selects all frames which have `enabled` set to true in the values in a frame.
enabled : Template {
	args ?:
	value :
		For arg : args, arg_name : Name
			Where arg.enabled
			Select arg_name : arg
}

# Return the first argument supplied.
first : firstifier(base : identity)

# Convert a function-like template from one that returns a list of non-null
# values into one that returns the first non-null value.
firstifier : Template {
	base ?:
	value : Template base {
		value +original: For item : original Reduce acc ?? item With acc : Null
	}
}

# Create a frame with the specified attribute name and value.
frame : Template {
	# The value to be used. Only one may be specified.
	args ?:
	# The name to use
	name ?:
	value : For arg : args Select name : arg
}

# Return the last argument supplied.
last : lastifier(base : identity)

# Convert a function-like template from one that returns a list of non-null
# values into one that returns the last non-null value.
lastifier : Template {
	base ?:
	value : Template base {
		value +original: For item : original Reduce item ?? acc With acc : Null
	}
}

# Function-like template that returns its arguments.
identity : Template {
	args ?:
	value : args
}

# Selects all non-null values in a frame.
non_null : Template {
	args ?:
	value :
		For arg : args, arg_name : Name
			Where !(arg Is Null)
			Select arg_name : arg
}

# Replaces all null values in a frame with `default`.
or_default : Template {
	args ?:
	default ?:
	value :
		For arg : args, arg_name : Name
			Select arg_name : arg ?? default
}

# Multiply a list of numbers.
product : productifier(base : identity)

# Convert a function-like template from one that returns a list of numbers to a
# single product.
productifier : Template {
	base ?:
	value : Template base {
		value +original: For item : original Reduce acc * item With acc : 1
	}
}

str_concat : str_concatifier(base : identity, delimiter : "")

# Convert a function-like template from one that returns a list of strings to a
# single string with the `delimiter` between them.
str_concatifier : Template {
	base ?:
	value : Template base {
		# A string to place between items.
		delimiter %:
		value +original:
			For item : original, pos : Ordinal
			Reduce
				(If pos > 1 Then acc & delimiter Else "") &
				item
			With acc : ""
	}
}

# Find the position of `str` in the argument. See `str_find_list` for details.
str_find : firstifier(base : str_find_list)

# Find the position of `str` in the arguments or null if it isn't found.
str_find_list : Template ( From lib:utilsinterop ).str_find_list {
	# The arguments to check (a.k.a., the haystack).
	args ?:
	# The string to find (a.k.a., the needle).
	str ?:
	# The position to begin searching from. If the position is negative, the
	# position is relative to the end of the string, rather than the beginning.
	start : 0
	# Search from the end of the string towards the beginning.
	backward : False

	str_args :
		For arg : args, arg_name : Name
		Select arg_name : {
			str : arg To Str
			length : Length str
			real_start :
				If start Enforce Int >= 0
					Then start
					Else (start + length)
			enabled : real_start Enforce Int >= 0 && real_start < length
		}
}

# convert a string to lower case.
str_lower_case : str_concatifier(base : str_lower_case_list)
# convert strings to lower case.
str_lower_case_list : Template ( From lib:utilsinterop ).str_lower_case_list {
	# The strings to manipulate.
	args ?:
}

# Pad a string to `length` by adding the string `padding` to the end. If
# multiple arguments are supplied, they are then concatentated after padding.
str_pad : str_concatifier(base : str_pad_list)

# Pad strings to `length` by adding the string `padding` to the end. If the
# string is too long, it is unmodified.
str_pad_list : Template {
	# The padding characters to use. If this is not a multiple of the difference
	# in lengths, it may pad slightly longer.
	padding : " "
	# The target length of the string.
	length ?:

	value :
		For arg : args, arg_name : Name
			Select arg_name :
				If Length arg < length
					Then (For x : 1 Through ((length - Length arg) / Length padding) Reduce (acc & padding) With acc : arg)
					Else arg
}

# Check if a string starts with `str`.
str_prefixed : allifier(base : str_prefixed_list)

# Check if a string starts with `str`.
str_prefixed_list : Template ( From lib:utilsinterop ).str_prefixed_list {
	# The strings to check.
	args ?:
}

# Replace occurrences of string `str` in a string to `with`. See
# `str_replace_list` for details.
str_replace : firstifier(base : str_replace_list)

# Replace occurrences of string `str` in strings to `with`.
str_replace_list : Template ( From lib:utilsinterop ).str_replace_list {
	# The strings to manipulate (a.k.a., the haystack).
	args ?:
	# The string for which to search (a.k.a., the needle).
	str ?:
	# The replacement string.
	with : ""
}

# Extract an internal span of a string. See `str_slice_list`.
str_slice : str_concatifier(base : str_slice_list)

# Extract an internal span of strings.
str_slice_list : Template ( From lib:utilsinterop ).str_slice_list {
	# The position at which to begin the extraction.
	start : 0
	# The position at which to end the extraction. If this is beyond the end of
	# the string, the entire string is kept. This or `length` must be provided.
	end : start + length
	# The length of the extraction. If this is beyond the end of the string, the
	# entire string is kept. This or `end` must be provided.
	length : end - start
	# If extraction begins after the end of the string, this value will be
	# returned.
	empty : ""

	str_args :
		If length Enforce Int < 0
			Then Error "Length \(length) must be non-negative."
			Else
				(For arg : args, arg_name : Name
				Select arg_name : {
					str : arg To Str
					str_length : Length str
					real_start :
						If start Enforce Int >= 0
							Then start
							Else (start + length)
					real_length : (If str_length < length Then str_length Else length) - real_start + 1
					enabled : real_length > 0
				})
}

# Check if a string ends with `str`.
str_suffixed : allifier(base : str_suffixed_list)

# Check if strings ends with `str`.
str_suffixed_list : Template ( From lib:utilsinterop ).str_suffixed_list {
	# The strings to check.
	args ?:
}

# Remove leading and trailing whitespace from a string.
str_trim : str_concatifier(base : str_trim_list)

# Remove leading and trailing whitespace from strings.
str_trim_list : Template ( From lib:utilsinterop ).str_trim_list {
	# The strings to manipulate.
	args ?:
}

# Get the UTF-8 length of a string.
str_utf8_length : sumifier(base : str_utf8_length_list)

# Get the UTF-8 length of strings.
str_utf8_length_list : Template ( From lib:utilsinterop ).str_utf8_length_list {
	# The strings to measure.
	args ?:
}

# CONVERT A STRING TO UPPER CASE.
str_upper_case : str_concatifier(base : str_upper_case_list)

# CONVERT STRINGS TO UPPER CASE.
str_upper_case_list : Template ( From lib:utilsinterop ).str_upper_case_list {
	# The strings to manipulate.
	args ?:
}

# Sum a list of numbers.
sum : sumifier(base : identity)

# Convert a function-like template from one that returns a list of numbers to a
# single sum.
sumifier : Template {
	base ?:
	value : Template base {
		value +original: For item : original Reduce acc + item With acc : 0
	}
}
